name: Backend Tests (Pytest)
 
on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    # 手動でこのワークフローをトリガーします。

jobs:
  pytest:
    name: Run Pytest
    runs-on: ubuntu-latest
    # ジョブをUbuntu最新環境で実行します。

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # リポジトリのコードをチェックアウトします。
        # これにより、以降のステップでリポジトリの内容にアクセスできます。

      - name: Create .env file for testing
        run: |
          echo "PYTEST_MODE=true" > .env
          echo "ENABLE_EMAIL_SENDING=false" >> .env
        # テスト環境用の設定ファイルを作成

      - name: Set up Backend and DB Containers
        run: |
          docker compose up -d backend db
          sleep 30
        # docker-compose.ymlを使用して、backendとDBコンテナを立ち上げる
        # データベース起動を待機

      - name: Wait for database to be ready
        run: |
          timeout 60 bash -c 'until docker exec postgres_db pg_isready -U template_user; do sleep 2; done'
        # PostgreSQLの準備完了を待機

      - name: List Running Containers
        run: |
          docker ps
        # 起動中のDockerコンテナを一覧表示します。

      - name: Update Dependencies
        run: |
          docker exec backend_container poetry lock
          docker exec backend_container poetry install --no-root
        # 依存関係のロックファイル更新とインストール

      - name: Run Database Migrations
        run: |
          docker exec backend_container poetry run alembic upgrade head
        # データベースマイグレーションを実行

      - name: Run All Tests with Coverage
        run: |
          docker exec backend_container poetry run pytest --cov=api --cov-report=xml --cov-report=term-missing -v
        # backendコンテナ内でpytestを実行（カバレッジ付き）
        # メール送信は環境変数で無効化済み

      - name: Upload coverage to Codecov (Optional)
        if: always()
        run: |
          docker exec backend_container cat coverage.xml > coverage.xml || echo "No coverage file found"
        # カバレッジファイルを取得（オプション）

      - name: Show Container Logs on Failure
        if: failure()
        run: |
          echo "=== Backend Container Logs ==="
          docker logs backend_container
          echo "=== Database Container Logs ==="
          docker logs postgres_db
        # 失敗時のコンテナログを表示